name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend:
    name: Backend (Go)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: nimbus_test
          POSTGRES_USER: nimbus
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache-dependency-path: backend/go.sum

      - name: Install dependencies
        working-directory: ./backend
        run: |
          go mod download
          go mod verify

      - name: Run go fmt
        working-directory: ./backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        working-directory: ./backend
        run: go vet ./...

      - name: Run tests
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: nimbus_test
          DB_USER: nimbus
          DB_PASSWORD: test_password
          JWT_SECRET: test-secret-key
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Build
        working-directory: ./backend
        run: go build -v -o bin/nimbus cmd/server/main.go

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./backend/coverage.out
          flags: backend
          fail_ci_if_error: false

  frontend:
    name: Frontend (Next.js)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Check formatting
        working-directory: ./frontend
        run: npm run format-check

      - name: Run linter
        working-directory: ./frontend
        run: npm run lint

      - name: Type check
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: Build
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080/api/v1
        run: npm run build

      - name: Check build output
        working-directory: ./frontend
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed - .next directory not found"
            exit 1
          fi
          echo "Build successful"

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.backend.result }}" == "success" ]] && [[ "${{ needs.frontend.result }}" == "success" ]]; then
            echo "All CI jobs passed!"
            exit 0
          else
            echo "Some CI jobs failed"
            echo "Backend: ${{ needs.backend.result }}"
            echo "Frontend: ${{ needs.frontend.result }}"
            exit 1
          fi
